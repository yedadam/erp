<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dadam.hr.attendance.mapper.AttendanceMapper">

    <!-- 월별 근태 통계 조회 -->
    <select id="selectMonthlyAttendanceStatistics" parameterType="map" resultType="com.dadam.hr.attendance.web.vo.AttendanceStatisticsVO">
        SELECT 
            #{employeeId} as employeeId,
            #{yearMonth} as yearMonth,
            COUNT(DISTINCT DATE(work_date)) as totalWorkDays,
            SUM(CASE WHEN work_type = 'NORMAL' THEN 1 ELSE 0 END) as normalWorkDays,
            SUM(CASE WHEN work_type = 'OVERTIME' THEN 1 ELSE 0 END) as overtimeWorkDays,
            SUM(CASE WHEN work_type = 'HOLIDAY' THEN 1 ELSE 0 END) as holidayWorkDays,
            SUM(CASE WHEN work_type = 'NIGHT' THEN 1 ELSE 0 END) as nightWorkDays,
            SUM(CASE WHEN work_type = 'VACATION' THEN 1 ELSE 0 END) as vacationDays,
            SUM(CASE WHEN work_type = 'SICK' THEN 1 ELSE 0 END) as sickDays,
            SUM(CASE WHEN work_type = 'PERSONAL' THEN 1 ELSE 0 END) as personalDays,
            SUM(work_hours) as totalWorkHours,
            SUM(CASE WHEN work_type = 'OVERTIME' THEN work_hours ELSE 0 END) as overtimeHours,
            SUM(CASE WHEN work_type = 'HOLIDAY' THEN work_hours ELSE 0 END) as holidayHours,
            SUM(CASE WHEN work_type = 'NIGHT' THEN work_hours ELSE 0 END) as nightHours,
            AVG(work_hours) as avgWorkHours,
            MIN(work_hours) as minWorkHours,
            MAX(work_hours) as maxWorkHours
        FROM attendance_record
        WHERE employee_id = #{employeeId}
        AND DATE_FORMAT(work_date, '%Y-%m') = #{yearMonth}
        AND work_date IS NOT NULL
    </select>

    <!-- 사원별 근무시간 통계 조회 -->
    <select id="selectEmployeeWorkHoursStats" parameterType="map" resultType="map">
        SELECT 
            ar.employee_id,
            e.employee_name,
            e.department,
            COUNT(DISTINCT DATE(ar.work_date)) as work_days,
            SUM(ar.work_hours) as total_hours,
            AVG(ar.work_hours) as avg_hours,
            SUM(CASE WHEN ar.work_type = 'OVERTIME' THEN ar.work_hours ELSE 0 END) as overtime_hours,
            SUM(CASE WHEN ar.work_type = 'HOLIDAY' THEN ar.work_hours ELSE 0 END) as holiday_hours,
            SUM(CASE WHEN ar.work_type = 'NIGHT' THEN ar.work_hours ELSE 0 END) as night_hours
        FROM attendance_record ar
        INNER JOIN employee e ON ar.employee_id = e.employee_id
        WHERE ar.company_id = #{companyId}
        AND DATE_FORMAT(ar.work_date, '%Y-%m') = #{yearMonth}
        GROUP BY ar.employee_id, e.employee_name, e.department
        ORDER BY e.employee_name
    </select>

    <!-- 부서별 근무시간 통계 조회 -->
    <select id="selectDepartmentWorkHoursStats" parameterType="map" resultType="map">
        SELECT 
            e.department,
            COUNT(DISTINCT ar.employee_id) as employee_count,
            COUNT(DISTINCT DATE(ar.work_date)) as total_work_days,
            SUM(ar.work_hours) as total_hours,
            AVG(ar.work_hours) as avg_hours,
            SUM(CASE WHEN ar.work_type = 'OVERTIME' THEN ar.work_hours ELSE 0 END) as overtime_hours,
            SUM(CASE WHEN ar.work_type = 'HOLIDAY' THEN ar.work_hours ELSE 0 END) as holiday_hours,
            SUM(CASE WHEN ar.work_type = 'NIGHT' THEN ar.work_hours ELSE 0 END) as night_hours
        FROM attendance_record ar
        INNER JOIN employee e ON ar.employee_id = e.employee_id
        WHERE ar.company_id = #{companyId}
        AND DATE_FORMAT(ar.work_date, '%Y-%m') = #{yearMonth}
        GROUP BY e.department
        ORDER BY e.department
    </select>

    <!-- 연장근무 통계 조회 -->
    <select id="selectOvertimeStatistics" parameterType="map" resultType="map">
        SELECT 
            ar.employee_id,
            e.employee_name,
            e.department,
            COUNT(DISTINCT DATE(ar.work_date)) as overtime_days,
            SUM(ar.work_hours) as overtime_hours,
            AVG(ar.work_hours) as avg_overtime_hours
        FROM attendance_record ar
        INNER JOIN employee e ON ar.employee_id = e.employee_id
        WHERE ar.company_id = #{companyId}
        AND DATE_FORMAT(ar.work_date, '%Y-%m') = #{yearMonth}
        AND ar.work_type = 'OVERTIME'
        GROUP BY ar.employee_id, e.employee_name, e.department
        ORDER BY overtime_hours DESC
    </select>

    <!-- 휴가 통계 조회 -->
    <select id="selectVacationStatistics" parameterType="map" resultType="map">
        SELECT 
            ar.employee_id,
            e.employee_name,
            e.department,
            SUM(CASE WHEN ar.work_type = 'VACATION' THEN 1 ELSE 0 END) as vacation_days,
            SUM(CASE WHEN ar.work_type = 'SICK' THEN 1 ELSE 0 END) as sick_days,
            SUM(CASE WHEN ar.work_type = 'PERSONAL' THEN 1 ELSE 0 END) as personal_days,
            SUM(CASE WHEN ar.work_type IN ('VACATION', 'SICK', 'PERSONAL') THEN 1 ELSE 0 END) as total_leave_days
        FROM attendance_record ar
        INNER JOIN employee e ON ar.employee_id = e.employee_id
        WHERE ar.company_id = #{companyId}
        AND DATE_FORMAT(ar.work_date, '%Y-%m') = #{yearMonth}
        GROUP BY ar.employee_id, e.employee_name, e.department
        HAVING total_leave_days > 0
        ORDER BY total_leave_days DESC
    </select>

    <!-- 근무 패턴 분석 -->
    <select id="selectWorkPatternAnalysis" parameterType="map" resultType="map">
        SELECT 
            ar.employee_id,
            e.employee_name,
            DAYOFWEEK(ar.work_date) as day_of_week,
            COUNT(*) as work_count,
            AVG(ar.work_hours) as avg_hours,
            SUM(ar.work_hours) as total_hours
        FROM attendance_record ar
        INNER JOIN employee e ON ar.employee_id = e.employee_id
        WHERE ar.company_id = #{companyId}
        AND DATE_FORMAT(ar.work_date, '%Y-%m') = #{yearMonth}
        AND ar.work_type = 'NORMAL'
        GROUP BY ar.employee_id, e.employee_name, DAYOFWEEK(ar.work_date)
        ORDER BY ar.employee_id, DAYOFWEEK(ar.work_date)
    </select>

</mapper> 