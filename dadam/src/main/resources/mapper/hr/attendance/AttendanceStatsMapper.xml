<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dadam.hr.attendance.mapper.AttendanceStatsMapper">

    <!-- [월별 근태 통계 조회] -->
    <select id="findMonthlyStats" resultType="AttendanceStatsVO">
        SELECT 
            'stats-' || TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') as statsCode,
            e.com_id as comId,
            e.dept_code as deptCode,
            e.emp_id as empId,
            #{yearMonth} as statsYearMonth,
            COUNT(DISTINCT a.work_date) as totalWorkDays,
            COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) as actualWorkDays,
            COUNT(CASE WHEN a.status = '정상' THEN 1 END) as normalDays,
            COUNT(CASE WHEN a.status = '지각' THEN 1 END) as lateDays,
            COUNT(CASE WHEN a.status = '조퇴' THEN 1 END) as earlyLeaveDays,
            COUNT(CASE WHEN a.actual_start_time IS NULL THEN 1 END) as absentDays,
            NVL(SUM(a.overtime_hrs), 0) as overtimeHours,
            NVL(SUM(al.days), 0) as annualLeaveDays,
            NVL(SUM(CASE WHEN al.leave_type = '반차' THEN al.days ELSE 0 END), 0) as halfLeaveDays,
            CASE 
                WHEN COUNT(DISTINCT a.work_date) > 0 
                THEN ROUND(COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) * 100.0 / COUNT(DISTINCT a.work_date), 2)
                ELSE 0 
            END as attendanceRate,
            CASE 
                WHEN COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) > 0 
                THEN ROUND(COUNT(CASE WHEN a.status = '지각' THEN 1 END) * 100.0 / COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END), 2)
                ELSE 0 
            END as lateRate,
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') as createdAt,
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') as updatedAt,
            getDeptName(e.dept_code) as deptName,
            getEmpName(e.emp_id) as empName,
            subCode(e.position) as positionName
        FROM emp e
        LEFT JOIN attendance a ON (e.emp_id = a.emp_id AND e.com_id = a.com_id 
                                 AND TO_CHAR(a.work_date, 'YYYY-MM') = #{yearMonth})
        LEFT JOIN annualLeave al ON (e.emp_id = al.emp_id AND e.com_id = al.com_id 
                                   AND TO_CHAR(al.start_date, 'YYYY-MM') = #{yearMonth}
                                   AND al.status = '승인')
        WHERE e.com_id = #{comId}
        <if test="deptCode != null and deptCode != ''">
            AND e.dept_code = #{deptCode}
        </if>
        GROUP BY e.com_id, e.dept_code, e.emp_id, e.position
    </select>

    <!-- [개인별 근태 통계 조회] -->
    <select id="findPersonalStats" resultType="AttendanceStatsVO">
        SELECT 
            'stats-' || TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') as statsCode,
            e.com_id as comId,
            e.dept_code as deptCode,
            e.emp_id as empId,
            #{yearMonth} as statsYearMonth,
            COUNT(DISTINCT a.work_date) as totalWorkDays,
            COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) as actualWorkDays,
            COUNT(CASE WHEN a.status = '정상' THEN 1 END) as normalDays,
            COUNT(CASE WHEN a.status = '지각' THEN 1 END) as lateDays,
            COUNT(CASE WHEN a.status = '조퇴' THEN 1 END) as earlyLeaveDays,
            COUNT(CASE WHEN a.actual_start_time IS NULL THEN 1 END) as absentDays,
            NVL(SUM(a.overtime_hrs), 0) as overtimeHours,
            NVL(SUM(al.days), 0) as annualLeaveDays,
            NVL(SUM(CASE WHEN al.leave_type = '반차' THEN al.days ELSE 0 END), 0) as halfLeaveDays,
            CASE 
                WHEN COUNT(DISTINCT a.work_date) > 0 
                THEN ROUND(COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) * 100.0 / COUNT(DISTINCT a.work_date), 2)
                ELSE 0 
            END as attendanceRate,
            CASE 
                WHEN COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) > 0 
                THEN ROUND(COUNT(CASE WHEN a.status = '지각' THEN 1 END) * 100.0 / COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END), 2)
                ELSE 0 
            END as lateRate,
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') as createdAt,
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') as updatedAt,
            getDeptName(e.dept_code) as deptName,
            getEmpName(e.emp_id) as empName,
            subCode(e.position) as positionName
        FROM emp e
        LEFT JOIN attendance a ON (e.emp_id = a.emp_id AND e.com_id = a.com_id 
                                 AND TO_CHAR(a.work_date, 'YYYY-MM') = #{yearMonth})
        LEFT JOIN annualLeave al ON (e.emp_id = al.emp_id AND e.com_id = al.com_id 
                                   AND TO_CHAR(al.start_date, 'YYYY-MM') = #{yearMonth}
                                   AND al.status = '승인')
        WHERE e.com_id = #{comId}
          AND e.emp_id = #{empId}
        GROUP BY e.com_id, e.dept_code, e.emp_id, e.position
    </select>

    <!-- [부서별 근태 현황 조회] -->
    <select id="findDeptStats" resultType="AttendanceStatsVO">
        SELECT 
            'dept-' || TO_CHAR(SYSDATE, 'YYYYMMDDHH24MISS') as statsCode,
            e.com_id as comId,
            e.dept_code as deptCode,
            NULL as empId,
            TO_CHAR(SYSDATE, 'YYYY-MM') as statsYearMonth,
            COUNT(DISTINCT a.work_date) as totalWorkDays,
            COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) as actualWorkDays,
            COUNT(CASE WHEN a.status = '정상' THEN 1 END) as normalDays,
            COUNT(CASE WHEN a.status = '지각' THEN 1 END) as lateDays,
            COUNT(CASE WHEN a.status = '조퇴' THEN 1 END) as earlyLeaveDays,
            COUNT(CASE WHEN a.actual_start_time IS NULL THEN 1 END) as absentDays,
            NVL(SUM(a.overtime_hrs), 0) as overtimeHours,
            NVL(SUM(al.days), 0) as annualLeaveDays,
            NVL(SUM(CASE WHEN al.leave_type = '반차' THEN al.days ELSE 0 END), 0) as halfLeaveDays,
            CASE 
                WHEN COUNT(DISTINCT a.work_date) > 0 
                THEN ROUND(COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) * 100.0 / COUNT(DISTINCT a.work_date), 2)
                ELSE 0 
            END as attendanceRate,
            CASE 
                WHEN COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END) > 0 
                THEN ROUND(COUNT(CASE WHEN a.status = '지각' THEN 1 END) * 100.0 / COUNT(CASE WHEN a.actual_start_time IS NOT NULL THEN 1 END), 2)
                ELSE 0 
            END as lateRate,
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') as createdAt,
            TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') as updatedAt,
            getDeptName(e.dept_code) as deptName,
            NULL as empName,
            NULL as positionName
        FROM emp e
        LEFT JOIN attendance a ON (e.emp_id = a.emp_id AND e.com_id = a.com_id 
                                 AND TO_CHAR(a.work_date, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM'))
        LEFT JOIN annualLeave al ON (e.emp_id = al.emp_id AND e.com_id = al.com_id 
                                   AND TO_CHAR(al.start_date, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM')
                                   AND al.status = '승인')
        WHERE e.com_id = #{comId}
        <if test="deptCode != null and deptCode != ''">
            AND e.dept_code = #{deptCode}
        </if>
        GROUP BY e.com_id, e.dept_code
        ORDER BY e.dept_code
    </select>

    <!-- [실시간 출퇴근 현황 조회] -->
    <select id="findRealtimeStatus" resultType="AttendanceRealtimeVO">
        SELECT 
            e.emp_id as empId,
            getEmpName(e.emp_id) as empName,
            e.dept_code as deptCode,
            getDeptName(e.dept_code) as deptName,
            subCode(e.position) as positionName,
            a.actual_start_time as todayCheckIn,
            a.actual_end_time as todayCheckOut,
            CASE 
                WHEN a.actual_start_time IS NULL THEN '미출근'
                WHEN a.status = '지각' THEN '지각'
                ELSE '출근'
            END as checkInStatus,
            CASE 
                WHEN a.actual_end_time IS NULL THEN '미퇴근'
                WHEN a.actual_end_time &lt; a.standard_end_time THEN '조퇴'
                ELSE '퇴근'
            END as checkOutStatus,
            CASE 
                WHEN a.actual_start_time IS NOT NULL AND a.actual_end_time IS NULL 
                THEN TO_CHAR(SYSDATE - a.actual_start_time, 'HH24:MI')
                ELSE NULL
            END as currentWorkTime,
            CASE 
                WHEN a.overtime_hrs > 0 
                THEN TO_CHAR(a.overtime_hrs, 'FM999.99') || '시간'
                ELSE '0시간'
            END as overtimeHours,
            CASE 
                WHEN a.actual_start_time IS NOT NULL AND a.actual_end_time IS NULL THEN '근무중'
                WHEN a.actual_start_time IS NOT NULL AND a.actual_end_time IS NOT NULL THEN '퇴근'
                WHEN al.emp_id IS NOT NULL THEN '휴가'
                ELSE '결근'
            END as workStatus,
            SYSDATE as lastUpdate
        FROM emp e
        LEFT JOIN attendance a ON (e.emp_id = a.emp_id AND e.com_id = a.com_id 
                                 AND a.work_date = TRUNC(SYSDATE))
        LEFT JOIN annualLeave al ON (e.emp_id = al.emp_id AND e.com_id = al.com_id 
                                   AND TRUNC(SYSDATE) BETWEEN al.start_date AND al.end_date
                                   AND al.status = '승인')
        WHERE e.com_id = #{comId}
        <if test="deptCode != null and deptCode != ''">
            AND e.dept_code = #{deptCode}
        </if>
        ORDER BY e.dept_code, e.emp_id
    </select>

    <!-- [오늘 출근자 수 조회] -->
    <select id="countTodayCheckIn" resultType="int">
        SELECT COUNT(*)
        FROM attendance
        WHERE com_id = #{comId}
          AND work_date = TRUNC(SYSDATE)
          AND actual_start_time IS NOT NULL
    </select>

    <!-- [오늘 지각자 수 조회] -->
    <select id="countTodayLate" resultType="int">
        SELECT COUNT(*)
        FROM attendance
        WHERE com_id = #{comId}
          AND work_date = TRUNC(SYSDATE)
          AND status = '지각'
    </select>

    <!-- [오늘 결근자 수 조회] -->
    <select id="countTodayAbsent" resultType="int">
        SELECT COUNT(*)
        FROM emp e
        LEFT JOIN attendance a ON (e.emp_id = a.emp_id AND e.com_id = a.com_id 
                                 AND a.work_date = TRUNC(SYSDATE))
        LEFT JOIN annualLeave al ON (e.emp_id = al.emp_id AND e.com_id = al.com_id 
                                   AND TRUNC(SYSDATE) BETWEEN al.start_date AND al.end_date
                                   AND al.status = '승인')
        WHERE e.com_id = #{comId}
          AND a.emp_id IS NULL
          AND al.emp_id IS NULL
    </select>

    <!-- [월별 통계 생성] -->
    <insert id="insertMonthlyStats" parameterType="AttendanceStatsVO">
        INSERT INTO attendanceStats (
            STATS_CODE, COM_ID, DEPT_CODE, EMP_ID, STATS_YEAR_MONTH,
            TOTAL_WORK_DAYS, ACTUAL_WORK_DAYS, NORMAL_DAYS, LATE_DAYS,
            EARLY_LEAVE_DAYS, ABSENT_DAYS, OVERTIME_HOURS, ANNUAL_LEAVE_DAYS,
            HALF_LEAVE_DAYS, ATTENDANCE_RATE, LATE_RATE, CREATED_AT
        ) VALUES (
            #{statsCode}, #{comId}, #{deptCode}, #{empId}, #{statsYearMonth},
            #{totalWorkDays}, #{actualWorkDays}, #{normalDays}, #{lateDays},
            #{earlyLeaveDays}, #{absentDays}, #{overtimeHours}, #{annualLeaveDays},
            #{halfLeaveDays}, #{attendanceRate}, #{lateRate}, SYSDATE
        )
    </insert>

    <!-- [월별 통계 업데이트] -->
    <update id="updateMonthlyStats" parameterType="AttendanceStatsVO">
        UPDATE attendanceStats
        SET TOTAL_WORK_DAYS = #{totalWorkDays},
            ACTUAL_WORK_DAYS = #{actualWorkDays},
            NORMAL_DAYS = #{normalDays},
            LATE_DAYS = #{lateDays},
            EARLY_LEAVE_DAYS = #{earlyLeaveDays},
            ABSENT_DAYS = #{absentDays},
            OVERTIME_HOURS = #{overtimeHours},
            ANNUAL_LEAVE_DAYS = #{annualLeaveDays},
            HALF_LEAVE_DAYS = #{halfLeaveDays},
            ATTENDANCE_RATE = #{attendanceRate},
            LATE_RATE = #{lateRate},
            UPDATED_AT = SYSDATE
        WHERE stats_code = #{statsCode}
          AND com_id = #{comId}
    </update>

</mapper>
