<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dadam.hr.emp.mapper.DeptMapper">
    <!-- [부서 전체 조회] 부서 테이블 전체 조회 -->
    <select id="getDeptList" parameterType="map" resultType="com.dadam.hr.emp.service.DeptVO">
        SELECT 
            d.dept_code AS deptCode,
            d.dept_name AS deptName,
            d.parent_dept_code AS parentDeptCode,
            -- 상위부서명(조회용)
            (SELECT dept_name FROM departments pd WHERE pd.dept_code = d.parent_dept_code) AS parentDeptName,
            d.emp_id AS empId,
            d.created_date AS createdDate,
            TO_CHAR(d.created_date, 'YYYY-MM-DD') AS createdDateStr,
            d.com_id AS comId,
            d.acct_yn AS acctYn,
            -- 사용여부 한글(조회용)
            CASE d.acct_yn WHEN 'Y' THEN '사용' ELSE '미사용' END AS statusText,
            d.remark,
            -- 인원수(조회용)
            (
                SELECT COUNT(*)
                FROM employees e
                WHERE e.dept_code = d.dept_code
            ) AS empCount,
            -- 권한코드/권한명(조회용)
            d.auth_code AS authCode,
            a.auth_name AS authName
        FROM departments d
        LEFT JOIN auth a ON d.auth_code = a.auth_code
        WHERE 1=1
         <choose>
            <when test="'deptCode'.equals(type)">
                AND dept_code LIKE '%'||#{value}||'%'
            </when>
            <when test="'deptName'.equals(type)">
            	 AND dept_name '%'||#{value}||'%'
            </when>
            <when test="'parentDeptName'.equals(type)">
            	 AND parent_dept_name  LIKE '%'||#{value}||'%'
            </when>
   </choose>
        ORDER BY d.dept_code
    </select>

    <!-- [부서 등록] 부서 신규 등록 -->
    <insert id="insertDept" parameterType="com.dadam.hr.emp.service.DeptVO">
        INSERT INTO departments (
            dept_code, dept_name, parent_dept_code, emp_id, created_date, com_id, acct_yn, remark
        ) VALUES (
            #{deptCode}, #{deptName}, #{parentDeptCode}, #{empId}, SYSDATE, #{comId}, #{acctYn}, #{remark}
        )
    </insert>

    <!-- [부서 수정] 부서 정보 수정 -->
    <update id="updateDept" parameterType="com.dadam.hr.emp.service.DeptVO">
        UPDATE departments
        SET dept_name = #{deptName},
            parent_dept_code = #{parentDeptCode},
            emp_id = #{empId},
            com_id = #{comId},
            acct_yn = #{acctYn},
            remark = #{remark}
        WHERE dept_code = #{deptCode}
        AND com_id = #{comId}
    </update>

    <!-- [부서 삭제] 부서 정보 삭제 -->
    <delete id="deleteDept" parameterType="map">
        DELETE FROM departments WHERE dept_code = #{deptCode} AND com_id = #{comId}
    </delete>

    <!-- [부서 상세 조회] 부서 상세정보 조회 -->
    <select id="getDeptDetail" parameterType="map" resultType="com.dadam.hr.emp.service.DeptVO">
        SELECT 
            dept_code AS deptCode,
            dept_name AS deptName,
            parent_dept_code AS parentDeptCode,
            emp_id AS empId,
            created_date AS createdDate,
            com_id AS comId,
            acct_yn AS acctYn,
            remark
        FROM departments
        WHERE dept_code = #{deptCode}
        AND com_id = #{comId}
    </select>
</mapper> 