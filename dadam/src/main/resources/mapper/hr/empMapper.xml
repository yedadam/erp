<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dadam.hr.emp.mapper.EmpMapper">

	<!--
		사원관리 Mapper(XML)
		- findEmpList: 사원 전체/검색/필터 조회
		- getEmpDetail: 사원 상세조회
		- insertEmp: 사원 등록
		- updateEmp: 사원 수정
		- deleteEmp: 사원 삭제
		- getMaxEmpId: 사번 최대값 조회
		- getAnnualLeaveInfo: 연차 정보 조회
		- updateAnnualLeaveInfo: 연차 정보 업데이트
		- useAnnualLeave: 연차 사용 처리
	-->

	<!-- [사원 목록 조회] 사원 전체/검색/필터 조회 -->
    <select id="findEmpList" resultType="EmpVO" parameterType="map">
        SELECT
            e.emp_id,
            e.com_id,
            e.dept_code,
            getDeptName(e.dept_code) AS dept_name,
            e.pwd,
            getEmpName(emp_id,#{comId}) AS emp_name,
            e.email,
            e.tel,
            e.addr,
            e.addr_detail AS addrDetail,
            e.hire_date,
            e.position,
            (SELECT s.SUB_NAME FROM SUBCODES s WHERE s.MAIN_CODE = 'pos' AND s.SUB_CODE = e.position) AS positionName,
            e.resign_date,
            e.emp_status,
            (SELECT s.SUB_NAME FROM SUBCODES s WHERE s.MAIN_CODE = 'stt' AND s.SUB_CODE = e.emp_status) AS empStatusName,
            e.work_type,
            (SELECT s.SUB_NAME FROM SUBCODES s WHERE s.MAIN_CODE = 'emp' AND s.SUB_CODE = e.work_type) AS workTypeName,
            e.resign_reason,
            e.sal,
            e.bank,
            e.acct_no,
            e.birth_date,
            e.profile_img_path,
            e.note,
            e.annual_leave_total AS annualLeaveTotal,
            e.annual_leave_used AS annualLeaveUsed,
            (e.annual_leave_total - e.annual_leave_used) AS annualLeaveRemain
        FROM employees e
        <where>
            <if test="keyword != null and keyword != ''">
                (e.emp_id LIKE '%' || #{keyword} || '%'
                OR getEmpName(e.emp_id,#{comId}) LIKE '%' || #{keyword} || '%'
                OR getDeptName(e.dept_code) LIKE '%' || #{keyword} || '%')
            </if>
            <if test="status != null and status != ''">
                AND e.emp_status = #{status}
            </if>
            <if test="dept != null and dept != ''">
                AND e.dept_code = #{dept}
            </if>
        </where>
        ORDER BY e.emp_id
    </select>
    
    
    
   

	<!-- [사원 상세 조회] 사원 상세정보 조회 -->
	<select id="getEmpDetail" parameterType="map" resultType="EmpVO">
		SELECT e.emp_id, e.com_id, e.dept_code, getDeptName(e.dept_code) AS dept_name, e.pwd, getEmpName(e.emp_id,#{comId}) AS emp_name,
		e.email, e.tel, e.addr, e.addr_detail AS addrDetail, e.hire_date, e.position, e.resign_date,
		e.emp_status, e.work_type, e.resign_reason,
		e.sal, e.bank, e.acct_no, e.birth_date, e.profile_img_path, e.note,
		e.annual_leave_total AS annualLeaveTotal,
		e.annual_leave_used AS annualLeaveUsed,
		(e.annual_leave_total - e.annual_leave_used) AS annualLeaveRemain
		FROM employees e
		WHERE e.emp_id = #{empId}
		AND e.com_id = #{comId}
	</select>
	
	
	

	<!-- [사원 등록] 사원 신규 등록 -->
	<insert id="insertEmp"
		parameterType="EmpVO">
		<selectKey resultType="string" keyProperty="empId" order="BEFORE">
			SELECT 'e' || (NVL(MAX(TO_NUMBER(SUBSTR(emp_id,2))),1000)+1) FROM employees
		</selectKey>
		INSERT INTO employees (
		emp_id, com_id, dept_code, pwd, emp_name, email, tel, addr, addr_detail, hire_date,
		position, resign_date, emp_status, work_type, resign_reason, sal,
		bank, acct_no, birth_date, profile_img_path, note, annual_leave_total, annual_leave_used
		) VALUES (
		#{empId}, #{comId}, #{deptCode}, #{pwd}, #{empName}, #{email}, #{tel}, #{addr}, #{addrDetail},
		#{hireDate}, #{position}, #{resignDate}, #{empStatus}, #{workType},
		#{resignReason}, #{sal}, #{bank}, #{acctNo}, #{birthDate},
		#{profileImgPath}, #{note}, #{annualLeaveTotal}, #{annualLeaveUsed}
		)
	</insert>

	<!-- [사원 수정] 사원 정보 수정 -->
	<update id="updateEmp"
		parameterType="EmpVO">
		UPDATE employees
		SET com_id = #{comId},
		dept_code = #{deptCode},
		pwd = #{pwd},
		emp_name = #{empName},
		email = #{email},
		tel = #{tel},
		addr = #{addr},
		addr_detail = #{addrDetail},
		hire_date = #{hireDate},
		position = #{position},
		resign_date = #{resignDate},
		emp_status = #{empStatus},
		work_type = #{workType},
		resign_reason = #{resignReason},
		sal = #{sal},
		bank = #{bank},
		acct_no = #{acctNo},
		birth_date = #{birthDate},
		profile_img_path = #{profileImgPath},
		note = #{note},
		annual_leave_total = #{annualLeaveTotal},
		annual_leave_used = #{annualLeaveUsed}
		WHERE emp_id = #{empId}
		AND com_id = #{comId}
	</update>

	<!-- [사원 삭제] 사원 정보 삭제 -->
	<delete id="deleteEmp" parameterType="map">
		DELETE FROM employees WHERE emp_id = #{empId} AND com_id = #{comId}
	</delete>

	<!-- [최대 사번 조회] 사번 최대값 조회 -->
	<select id="getMaxEmpId" resultType="string">
		SELECT MAX(emp_id) FROM employees
	</select>

	<!-- [사원 상세 조회(조인)] 사원 상세정보(부서조인) 조회 -->
	<select id="findEmpDetail" parameterType="map" resultType="EmpVO">
		SELECT
			e.emp_id, e.com_id, e.dept_code, d.dept_name, e.pwd, e.emp_name,
			e.email, e.tel, e.addr, e.hire_date, e.position, e.resign_date,
			e.emp_status, e.work_type, e.resign_reason, e.sal, e.bank, e.acct_no,
			e.birth_date, e.profile_img_path, e.note,
			e.annual_leave_total AS annualLeaveTotal,
			e.annual_leave_used AS annualLeaveUsed,
			(e.annual_leave_total - e.annual_leave_used) AS annualLeaveRemain
		FROM employees e
		LEFT JOIN departments d ON e.dept_code = d.dept_code
		WHERE e.emp_id = #{empId}
		AND e.com_id = #{comId}
	</select>

	<!-- [연차 정보 조회] 사원 연차 정보 조회 -->
	<select id="getAnnualLeaveInfo" parameterType="map" resultType="EmpVO">
		SELECT
			emp_id,
			annual_leave_total AS annualLeaveTotal,
			annual_leave_used AS annualLeaveUsed,
			(annual_leave_total - annual_leave_used) AS annualLeaveRemain
		FROM employees
		WHERE emp_id = #{empId}
		AND com_id = #{comId}
	</select>

	<!-- [연차 정보 업데이트] 사원 연차 정보 업데이트 -->
	<update id="updateAnnualLeaveInfo" parameterType="map">
		UPDATE employees
		SET annual_leave_total = #{totalLeave},
			annual_leave_used = #{usedLeave}
		WHERE emp_id = #{empId}
		AND com_id = #{comId}
	</update>

	<!-- [연차 사용 처리] 사원 연차 사용 처리 -->
	<update id="useAnnualLeave" parameterType="map">
		UPDATE employees
		SET annual_leave_used = annual_leave_used + #{usedDays}
		WHERE emp_id = #{empId}
		AND com_id = #{comId}
		AND (annual_leave_total - annual_leave_used) >= #{usedDays}
	</update>

</mapper>