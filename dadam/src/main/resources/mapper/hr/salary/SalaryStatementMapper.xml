<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dadam.hr.salary.mapper.SalaryStatementMapper">
    <!-- 급여명세서 전체 목록 조회 (DB 실구조 매핑) -->
    <select id="selectSalaryStatementList" resultType="SalaryStatementVO">
        SELECT
            s.sal_id AS sal_id,
            s.emp_id AS emp_id,
            s.com_id AS com_id,
            s.calc_month AS calc_month,
            s.base_sal AS base_sal,
            s.bonus AS bonus,
            s.ot_allow AS ot_allow,
            s.holi_allow AS holi_allow,
            s.meal_allow AS meal_allow,
            s.inc_tax AS inc_tax,
            s.nat_pension AS nat_pension,
            s.health_insur AS health_insur,
            s.emp_insur AS emp_insur,
            s.ltc_insur AS ltc_insur,
            s.sal1 AS sal1,
            s.sal2 AS sal2,
            s.sal3 AS sal3,
            s.sal4 AS sal4,
            s.sal5 AS sal5,
            s.sal6 AS sal6,
            s.sal7 AS sal7,
            s.sal8 AS sal8,
            s.sal9 AS sal9,
            s.sal10 AS sal10,
            (NVL(s.sal1,0) + NVL(s.sal2,0) + NVL(s.sal3,0) + NVL(s.sal4,0) + NVL(s.sal5,0) + NVL(s.sal6,0) + NVL(s.sal7,0) + NVL(s.sal8,0) + NVL(s.sal9,0) + NVL(s.sal10,0)) AS allowanceTotal,
            (NVL(s.inc_tax,0) + NVL(s.nat_pension,0) + NVL(s.health_insur,0) + NVL(s.emp_insur,0) + NVL(s.ltc_insur,0)) AS deductionTotal,
            nvl(s.net_salary, 0) AS net_salary,
            s.status AS status,
            TO_CHAR(s.created_date, 'YYYY-MM-DD') AS createdDate,
            e.emp_name AS emp_name,
            e.dept_code AS dept_code,
            d.dept_name AS dept_name
        FROM salarystatement s
        JOIN employees e ON s.emp_id = e.emp_id AND s.com_id = e.com_id
        LEFT JOIN departments d ON e.dept_code = d.dept_code
        <where>
            s.com_id = #{comId}
            <if test="emp_id != null and emp_id != ''">
                AND s.emp_id = #{emp_id}
            </if>
            <if test="calc_month != null and calc_month != ''">
                AND s.calc_month = #{calc_month}
            </if>
            <if test="keyword != null and keyword != ''">
                AND (e.emp_name LIKE '%' || #{keyword} || '%' OR s.sal_id LIKE '%' || #{keyword} || '%')
            </if>
        </where>
        ORDER BY s.calc_month DESC
    </select>
    <!-- 단일 급여명세서 상세 조회 (sal_id 기준) -->
    <select id="selectSalaryStatementById" parameterType="map" resultType="SalaryStatementVO">
        SELECT
            s.*,
            e.emp_name AS empName,
            -- EMP_ALLOWANCE에서 식대, 교통비 등 추가 급여항목 조회
            (SELECT NVL(SUM(AMOUNT), 0) FROM EMP_ALLOWANCE 
             WHERE EMP_ID = s.emp_id AND COM_ID = s.com_id AND ALLOW_CODE = 'MEAL') AS mealAllowance,
            (SELECT NVL(SUM(AMOUNT), 0) FROM EMP_ALLOWANCE 
             WHERE EMP_ID = s.emp_id AND COM_ID = s.com_id AND ALLOW_CODE = 'TRANSPORT') AS transportAllowance
        FROM salarystatement s
        JOIN employees e ON s.emp_id = e.emp_id AND s.com_id = e.com_id
        WHERE s.sal_id = #{salId}
          AND s.com_id = #{comId}
    </select>

    <!-- 사원별 급여항목(EMP_ALLOWANCE) 조회 -->
    <select id="selectEmpAllowances" parameterType="map" resultType="map">
        SELECT ALLOW_CODE, AMOUNT, NOTE
        FROM EMP_ALLOWANCE
        WHERE EMP_ID = #{empId}
          AND COM_ID = #{comId}
        ORDER BY ALLOW_CODE
    </select>
    <!-- 급여명세서 등록 (DB 컬럼명 일치) -->
    <insert id="insertSalaryStatement" parameterType="SalaryStatementVO">
        INSERT INTO salarystatement (
            sal_id, emp_id, com_id, calc_month, base_sal, bonus, ot_allow, holi_allow, meal_allow,
            inc_tax, emp_insur, health_insur, ltc_insur, nat_pension,
            sal1, sal2, sal3, sal4, sal5, sal6, sal7, sal8, sal9, sal10,
            work_days, overtime_hours, leave_days, absence_days, late_count, early_leave_count,
            net_salary, status, created_date, updated_date, total_pay, total_deduct, note
        ) VALUES (
            #{salId}, #{empId}, #{comId}, #{calcMonth}, #{baseSal}, #{bonus}, #{otAllow}, #{holiAllow}, #{mealAllow},
            #{incTax}, #{empInsur}, #{healthInsur}, #{ltcInsur}, #{natPension},
            #{sal1}, #{sal2}, #{sal3}, #{sal4}, #{sal5}, #{sal6}, #{sal7}, #{sal8}, #{sal9}, #{sal10},
            #{workDays}, #{overtimeHours}, #{leaveDays}, #{absenceDays}, #{lateCount}, #{earlyLeaveCount},
            #{netSalary}, #{status}, SYSDATE, SYSDATE, #{totalPay}, #{totalDeduct}, #{note}
        )
    </insert>
    <!-- 급여명세서 수정 (DB 컬럼명 일치) -->
    <update id="updateSalaryStatement" parameterType="SalaryStatementVO">
        UPDATE salarystatement
        SET base_sal = #{baseSal}, bonus = #{bonus}, ot_allow = #{otAllow}, holi_allow = #{holiAllow}, meal_allow = #{mealAllow},
            inc_tax = #{incTax}, emp_insur = #{empInsur}, health_insur = #{healthInsur}, ltc_insur = #{ltcInsur}, nat_pension = #{natPension},
            sal1 = #{sal1}, sal2 = #{sal2}, sal3 = #{sal3}, sal4 = #{sal4}, sal5 = #{sal5}, sal6 = #{sal6}, sal7 = #{sal7}, sal8 = #{sal8}, sal9 = #{sal9}, sal10 = #{sal10},
            work_days = #{workDays}, overtime_hours = #{overtimeHours}, leave_days = #{leaveDays}, absence_days = #{absenceDays},
            late_count = #{lateCount}, early_leave_count = #{earlyLeaveCount},
            net_salary = #{netSalary}, status = #{status}, updated_date = SYSDATE, total_pay = #{totalPay}, total_deduct = #{totalDeduct}, note = #{note}
        WHERE sal_id = #{salId} AND com_id = #{comId}
    </update>
    <!-- 급여명세서 삭제 (DB 컬럼명 일치) -->
    <delete id="deleteSalaryStatement" parameterType="map">
        DELETE FROM salarystatement WHERE sal_id = #{salId} AND com_id = #{comId}
    </delete>
    <!-- salId 중복 체크 -->
    <select id="existsBySalId" resultType="int" parameterType="string">
        SELECT COUNT(1) FROM SALARYSTATEMENT WHERE SAL_ID = #{salId}
    </select>
</mapper> 