<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dadam.hr.salary.mapper.SalaryMapper">

    <!-- 급여 명세서 목록 조회 -->
    <select id="selectSalaryList" parameterType="map" resultType="map">
        SELECT 
            s.salary_id,
            s.company_id,
            s.employee_id,
            e.employee_name,
            s.year_month,
            s.base_salary,
            s.total_salary,
            s.net_salary,
            s.status,
            s.calculated_at,
            s.approved_at,
            s.paid_at,
            s.remarks
        FROM salary_master s
        INNER JOIN employee e ON s.employee_id = e.employee_id
        WHERE s.company_id = #{companyId}
        <if test="yearMonth != null and yearMonth != ''">
            AND s.year_month = #{yearMonth}
        </if>
        <if test="employeeName != null and employeeName != ''">
            AND e.employee_name LIKE CONCAT('%', #{employeeName}, '%')
        </if>
        <if test="status != null and status != ''">
            AND s.status = #{status}
        </if>
        ORDER BY s.year_month DESC, e.employee_name ASC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 급여 명세서 상세 조회 -->
    <select id="selectSalaryDetail" parameterType="long" resultType="map">
        SELECT 
            s.salary_id,
            s.company_id,
            s.employee_id,
            e.employee_name,
            e.employee_no,
            e.department,
            e.position,
            s.year_month,
            s.base_salary,
            s.total_salary,
            s.net_salary,
            s.status,
            s.calculated_at,
            s.approved_at,
            s.paid_at,
            s.remarks
        FROM salary_master s
        INNER JOIN employee e ON s.employee_id = e.employee_id
        WHERE s.salary_id = #{salaryId}
    </select>

    <!-- 급여 상세 항목 조회 -->
    <select id="selectSalaryDetailItems" parameterType="long" resultType="map">
        SELECT 
            detail_id,
            salary_id,
            item_type,
            item_name,
            amount,
            remarks
        FROM salary_detail
        WHERE salary_id = #{salaryId}
        ORDER BY item_type, item_name
    </select>

    <!-- 급여 상태 업데이트 -->
    <update id="updateSalaryStatus" parameterType="map">
        UPDATE salary_master 
        SET 
            status = #{status},
            <if test="status == 'APPROVED'">
                approved_at = NOW()
            </if>
            <if test="status == 'PAID'">
                paid_at = NOW()
            </if>
            updated_at = NOW()
        WHERE salary_id = #{salaryId}
    </update>

    <!-- 급여 항목 설정 조회 -->
    <select id="selectSalaryItemsByCompany" parameterType="long" resultType="map">
        SELECT 
            sal1, sal2, sal3, sal4, sal5,
            sal6, sal7, sal8, sal9, sal10
        FROM salary_items
        WHERE company_id = #{companyId}
    </select>

    <!-- 급여 항목 설정 저장 -->
    <insert id="insertSalaryItems" parameterType="map">
        INSERT INTO salary_items (
            company_id, sal1, sal2, sal3, sal4, sal5,
            sal6, sal7, sal8, sal9, sal10,
            created_at, updated_at
        ) VALUES (
            #{companyId}, #{sal1}, #{sal2}, #{sal3}, #{sal4}, #{sal5},
            #{sal6}, #{sal7}, #{sal8}, #{sal9}, #{sal10},
            NOW(), NOW()
        )
        ON DUPLICATE KEY UPDATE
            sal1 = VALUES(sal1),
            sal2 = VALUES(sal2),
            sal3 = VALUES(sal3),
            sal4 = VALUES(sal4),
            sal5 = VALUES(sal5),
            sal6 = VALUES(sal6),
            sal7 = VALUES(sal7),
            sal8 = VALUES(sal8),
            sal9 = VALUES(sal9),
            sal10 = VALUES(sal10),
            updated_at = NOW()
    </insert>

    <!-- 급여 마스터 저장 -->
    <insert id="insertSalaryMaster" parameterType="SalaryCalculationVO" 
            useGeneratedKeys="true" keyProperty="salaryId">
        INSERT INTO salary_master (
            company_id, employee_id, year_month,
            base_salary, total_salary, net_salary,
            status, calculated_at, created_at, updated_at
        ) VALUES (
            #{companyId}, #{employeeId}, #{yearMonth},
            #{baseSalary}, #{totalSalary}, #{netSalary},
            'CALCULATED', NOW(), NOW(), NOW()
        )
    </insert>

    <!-- 급여 상세 저장 -->
    <insert id="insertSalaryDetail" parameterType="SalaryDetailVO">
        INSERT INTO salary_detail (
            salary_id, item_type, item_name, amount, remarks, created_at
        ) VALUES (
            #{salaryId}, #{itemType}, #{itemName}, #{amount}, #{remarks}, NOW()
        )
    </insert>

    <!-- 사원별 년월 급여 삭제 -->
    <delete id="deleteSalaryByEmployeeAndMonth" parameterType="map">
        DELETE s FROM salary_master s
        WHERE s.employee_id = #{employeeId} 
        AND s.year_month = #{yearMonth}
    </delete>

    <!-- 급여 계산 통계 조회 -->
    <select id="selectSalaryCalculationStats" parameterType="map" resultType="map">
        SELECT 
            COUNT(*) as total_count,
            SUM(CASE WHEN status = 'CALCULATED' THEN 1 ELSE 0 END) as calculated_count,
            SUM(CASE WHEN status = 'APPROVED' THEN 1 ELSE 0 END) as approved_count,
            SUM(CASE WHEN status = 'PAID' THEN 1 ELSE 0 END) as paid_count,
            SUM(total_salary) as total_amount,
            AVG(total_salary) as avg_salary
        FROM salary_master
        WHERE company_id = #{companyId}
        <if test="yearMonth != null and yearMonth != ''">
            AND year_month = #{yearMonth}
        </if>
    </select>

    <!-- 급여 항목별 통계 조회 -->
    <select id="selectSalaryItemStats" parameterType="map" resultType="map">
        SELECT 
            item_type,
            item_name,
            COUNT(*) as count,
            SUM(amount) as total_amount,
            AVG(amount) as avg_amount
        FROM salary_detail sd
        INNER JOIN salary_master sm ON sd.salary_id = sm.salary_id
        WHERE sm.company_id = #{companyId}
        <if test="yearMonth != null and yearMonth != ''">
            AND sm.year_month = #{yearMonth}
        </if>
        GROUP BY item_type, item_name
        ORDER BY item_type, total_amount DESC
    </select>

    <!-- 급여 계산 이력 조회 -->
    <select id="selectSalaryCalculationHistory" parameterType="map" resultType="map">
        SELECT 
            s.salary_id,
            s.employee_id,
            e.employee_name,
            s.year_month,
            s.base_salary,
            s.total_salary,
            s.net_salary,
            s.status,
            s.calculated_at,
            s.approved_at,
            s.paid_at
        FROM salary_master s
        INNER JOIN employee e ON s.employee_id = e.employee_id
        WHERE s.company_id = #{companyId}
        AND s.employee_id = #{employeeId}
        ORDER BY s.year_month DESC
        LIMIT #{limit}
    </select>

    <!-- 급여 승인 대기 목록 조회 -->
    <select id="selectPendingApprovalList" parameterType="long" resultType="map">
        SELECT 
            s.salary_id,
            s.employee_id,
            e.employee_name,
            e.department,
            s.year_month,
            s.base_salary,
            s.total_salary,
            s.net_salary,
            s.calculated_at
        FROM salary_master s
        INNER JOIN employee e ON s.employee_id = e.employee_id
        WHERE s.company_id = #{companyId}
        AND s.status = 'CALCULATED'
        ORDER BY s.calculated_at ASC
    </select>

    <!-- 급여 지급 완료 목록 조회 -->
    <select id="selectPaidSalaryList" parameterType="map" resultType="map">
        SELECT 
            s.salary_id,
            s.employee_id,
            e.employee_name,
            e.department,
            s.year_month,
            s.total_salary,
            s.net_salary,
            s.paid_at
        FROM salary_master s
        INNER JOIN employee e ON s.employee_id = e.employee_id
        WHERE s.company_id = #{companyId}
        AND s.status = 'PAID'
        <if test="yearMonth != null and yearMonth != ''">
            AND s.year_month = #{yearMonth}
        </if>
        ORDER BY s.paid_at DESC
    </select>

</mapper> 