<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dadam.inventory.inbound.mapper.InboundMapper">

<!-- 주문입고를 위한 발주서 조회 -->
	<select id="inboundPurchaseFindAll" resultType="PurchaseVO">
			SELECT 
				pod.pur_ord_code,
		        pod.pur_ord_dtl_code,
		        pod.item_code,
                i.name item_name,
                i.price,
		        pod.quantity,
		        pod.status,
		        pod.reccv_date,
		        po.exp_dlv_date,
		        getEmpName(po.emp_id) emp_id,
		        getvdrName(po.vdr_code) vdr_code
		FROM purchaseOrderDetail pod join purchaseOrder po
		                               on(pod.pur_ord_code=po.pur_ord_code)
                                     join item i
                                       on(i.item_code = pod.item_code)
		WHERE pod.com_id = 'com-101'
	</select>
	
	<select id="warehouseList" resultType="InboundVO">
		SELECT w.name||' '|| nvl(l.name, ' ') name, l.loc_code locCode
		FROM warehouse w join warehouseLocation l
                   		   on(w.wh_code = l.wh_code)
	</select>
	
	<!-- 입고 처리 -->
	<insert id="insertPurchaseInbound" parameterType="PurchaseVO">
		<selectKey resultType="string" keyProperty="lot" order="BEFORE">
			SELECT 'inlot-' || (NVL(MAX(TO_NUMBER(SUBSTR(lot,7))),100)+1) lot
			FROM purchase
		</selectKey>
		INSERT INTO purchase
		VALUES (#{lot}, #{itemCode}, #{purOrdDtlCode}, #{empId}, sysdate, #{quantity}, #{currQty}, #{price}, #{status}, #{note}, #{comId}, #{locCode})
	</insert>
	
	<!-- 발주서상태 수정 -->
	<update id="updatePurchaseOrderDetailInbound" parameterType="PurchaseVO">
		UPDATE purchaseOrderDetail
		SET status = #{status}
		WHERE pur_ord_dtl_code = #{purOrdDtlCode}
		AND com_id = #{comId}
	</update>
	
	<!-- 재고반영 머지문 -->
	<update id="updateStockInbound" parameterType="purchaseVO">
		<selectKey keyProperty="stkCode" resultType="purchaseVO" order="BEFORE">
			SELECT 'stk-' || (NVL(MAX(TO_NUMBER(SUBSTR(stk_code,5))),100)+1) stkCode
			FROM stock
		</selectKey>
		MERGE INTO stock stk
		USING (
		    SELECT 
		        #{locCode}  AS loc_code,
		        #{itemCode} AS item_code,
		        #{quantity} AS quantity,
		        #{comId}   AS com_id,
		        #{stkCode} AS stk_code
		    FROM dual00.
		    
		) data
		ON (
		    stk.loc_code = data.loc_code AND
		    stk.item_code = data.item_code AND
		    stk.com_id = data.com_id
		)
		
		WHEN MATCHED THEN
		    UPDATE SET 
		        stk.quantity = stk.quantity + data.quantity
		        
		WHEN NOT MATCHED THEN
		 INSERT (
        stk_code,
        loc_code,
        item_code, 
        quantity, 
        com_id
    )
    VALUES (
        data.stk_code,
        data.loc_code,
        data.item_code,
        data.quantity,
        data.com_id 
    )
	</update>
	
	
</mapper>