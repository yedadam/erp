<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dadam.inventory.inbound.mapper.InboundMapper">

	<select id="selectPurchaseList" resultType="InboundVO" parameterType="String">
	SELECT
			lot,
			item_code,
			getitemName(item_code) itemName,
			pur_ord_dtl_code,
			emp_id,
			getempName(emp_id, #{comId}) empName,
			created_date,
			quantity,
			curr_qty,
			price,
			status,
			getsubcode(status) statusName,
			note,
			loc_code
	FROM purchase
	WHERE com_id = #{comId}
	ORDER BY created_date
	</select>
<!-- 주문입고를 위한 발주서 조회 -->
	<select id="inboundPurchaseFindAll" resultType="PurchaseVO" parameterType="String">
	SELECT 
        pod.pur_ord_code,
        pod.pur_ord_dtl_code,
        pod.item_code,
        getitemname(pod.item_code) item_name,
        getItemPrice(pod.item_code) price,
        pod.quantity,
        pod.status,
        subcode(pod.status) status_name,
        pod.reccv_date,
        po.exp_dlv_date,
        getEmpName(po.emp_id, #{comId}) emp_id,
        getvdrName(po.vdr_code) vdr_code,
        nvl((select max(curr_qty)
	         from purchase
	         where pur_ord_dtl_code =  pod.pur_ord_dtl_code),0) curr_qty
	FROM purchaseOrderDetail pod join purchaseOrder po
	                               on(pod.pur_ord_code=po.pur_ord_code AND pod.com_id = po.com_id)
	WHERE pod.com_id = #{comId} and pod.status not in('pds03')
	</select>
	
	<select id="warehouseList" resultType="InboundVO" parameterType="String">
		SELECT w.name||' '|| nvl(l.name, ' ') name, l.loc_code locCode
		FROM warehouse w join warehouseLocation l
                   		   on(w.wh_code = l.wh_code and w.com_id = l.com_id)
        WHERE w.com_id = #{comId}
	</select>
	
	<!-- 입고 처리 -->
	<insert id="insertPurchaseInbound" parameterType="PurchaseVO">
		<selectKey resultType="string" keyProperty="lot" order="BEFORE">
			SELECT 'inlot-' || (NVL(MAX(TO_NUMBER(SUBSTR(lot,7))),100)+1) lot
			FROM purchase
		</selectKey>
		INSERT INTO purchase(
					LOT,
					ITEM_CODE,
					PUR_ORD_DTL_CODE,
					EMP_ID,
					CREATED_DATE,
					QUANTITY,
					CURR_QTY,
					PRICE,
					STATUS,
					NOTE,
					COM_ID,
					LOC_CODE)
		VALUES (#{lot}, #{itemCode}, #{purOrdDtlCode}, #{empId}, sysdate, #{quantity}, #{currQty}, #{price}, #{status}, #{note}, #{comId}, #{locCode})
	</insert>
	
	<!-- 발주서상태 수정 -->
	<update id="updatePurchaseOrderDetailInbound" parameterType="PurchaseVO">
		UPDATE purchaseOrderDetail
		SET status = #{status}, reccv_date= sysdate
		WHERE pur_ord_dtl_code = #{purOrdDtlCode}
		AND com_id = #{comId}
	</update>
	
	<!-- 재고반영 머지문 -->
	<update id="updateStockInbound" parameterType="purchaseVO">
		<selectKey keyProperty="stkCode" resultType="purchaseVO" order="BEFORE">
			SELECT 'stk-' || (NVL(MAX(TO_NUMBER(SUBSTR(stk_code,5))),100)+1) stkCode
			FROM stock
		</selectKey>
		MERGE INTO stock stk
		USING (
		    SELECT 
		        #{locCode}  AS loc_code,
		        #{itemCode} AS item_code,
		        #{quantity} AS quantity,
		        #{comId}   AS com_id,
		        #{stkCode} AS stk_code,
		        #{lot} AS lot
		    FROM dual
		) data
		ON (
		    stk.loc_code = data.loc_code AND stk.item_code = data.item_code AND stk.com_id = data.com_id
		)
		
		WHEN MATCHED THEN
		    UPDATE SET 
		        stk.quantity = stk.quantity + data.quantity
		        
		WHEN NOT MATCHED THEN
		 INSERT (
        stk_code,
        loc_code,
        item_code, 
        quantity, 
        com_id,
        lot
    )
    VALUES (
        data.stk_code,
        data.loc_code,
        data.item_code,
        data.quantity,
        data.com_id,
        data.lot
    )
	</update>
	
	<update id="prcPurchaseOrderStatus" parameterType="PurchaseVO">
	{ CALL prc_purchaseOrder_status( #{purOrdDtlCode, mode=IN, jdbcType=VARCHAR})}
	</update>
	<!-- 사용안함 -->
	<!-- <select id="purchaseCurrQty" parameterType="PurchaseVO" resultType="int">
		SELECT max(curr_qty)
		FROM purchase
		WHERE com_id = #{comId} AND pur_ord_dtl_code = #{purOrdDtlCode}
	</select> -->
</mapper>